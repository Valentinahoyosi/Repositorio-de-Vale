# M√≥dulo 1: Introducci√≥n a la Programaci√≥n Orientada a Objetos (POO) en Python

Pydantic es una librer√≠a de Python que permite **validar y gestionar datos** de manera sencilla utilizando las **anotaciones de tipo** (type hints) del lenguaje.  
Su objetivo principal es asegurar que los datos que entran en tu aplicaci√≥n tengan el formato y los tipos correctos, simplificando la validaci√≥n y reduciendo errores.

Se utiliza ampliamente en proyectos modernos, especialmente junto con **FastAPI**, para la construcci√≥n de **APIs r√°pidas y seguras**.

---

## üöÄ Ventajas de Pydantic
- **Validaci√≥n autom√°tica de datos** ‚Üí Si un valor no cumple con el tipo esperado, Pydantic genera un error.  
- **Conversi√≥n de tipos** ‚Üí Intenta convertir datos al tipo definido (ejemplo: `"25"` ‚Üí `int`).  
- **Simplicidad y rapidez** ‚Üí Modelos f√°ciles de crear y mantener.  
- **Integraci√≥n con FastAPI** ‚Üí Documentaci√≥n autom√°tica con OpenAPI/Swagger.  
- **Mejora la confiabilidad** ‚Üí Reduce errores al trabajar con datos externos (formularios, JSON, bases de datos).  

---

## üîß Caracter√≠sticas principales
- Uso de **clases y anotaciones de tipo** para definir modelos.  
- **Manejo de errores estructurado** mediante `ValidationError`.  
- Posibilidad de crear **validaciones personalizadas** con `@validator`.  
- Definici√≥n de **restricciones** con `Field` (ejemplo: valores m√≠nimos, m√°ximos, longitud, regex).  
- **Conversi√≥n autom√°tica** de tipos de datos.  
- Compatible con **entornos asincr√≥nicos (async/await)**.  

---


